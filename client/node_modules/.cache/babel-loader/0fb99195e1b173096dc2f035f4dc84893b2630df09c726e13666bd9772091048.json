{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet } from \"../common/canUse.js\";\nimport { checkDocument } from \"./getFromAST.js\";\nimport { invariant } from \"../globals/index.js\";\nfunction identity(document) {\n  return document;\n}\nvar DocumentTransform = function () {\n  function DocumentTransform(transform, options) {\n    if (options === void 0) {\n      options = Object.create(null);\n    }\n    this.resultCache = canUseWeakSet ? new WeakSet() : new Set();\n    this.transform = transform;\n    if (options.getCacheKey) {\n      this.getCacheKey = options.getCacheKey;\n    }\n    if (options.cache !== false) {\n      this.stableCacheKeys = new Trie(canUseWeakMap, function (key) {\n        return {\n          key: key\n        };\n      });\n    }\n  }\n  DocumentTransform.prototype.getCacheKey = function (document) {\n    return [document];\n  };\n  DocumentTransform.identity = function () {\n    return new DocumentTransform(identity, {\n      cache: false\n    });\n  };\n  DocumentTransform.split = function (predicate, left, right) {\n    if (right === void 0) {\n      right = DocumentTransform.identity();\n    }\n    return new DocumentTransform(function (document) {\n      var documentTransform = predicate(document) ? left : right;\n      return documentTransform.transformDocument(document);\n    }, {\n      cache: false\n    });\n  };\n  DocumentTransform.prototype.transformDocument = function (document) {\n    if (this.resultCache.has(document)) {\n      return document;\n    }\n    var cacheEntry = this.getStableCacheEntry(document);\n    if (cacheEntry && cacheEntry.value) {\n      return cacheEntry.value;\n    }\n    checkDocument(document);\n    var transformedDocument = this.transform(document);\n    this.resultCache.add(transformedDocument);\n    if (cacheEntry) {\n      cacheEntry.value = transformedDocument;\n    }\n    return transformedDocument;\n  };\n  DocumentTransform.prototype.concat = function (otherTransform) {\n    var _this = this;\n    return new DocumentTransform(function (document) {\n      return otherTransform.transformDocument(_this.transformDocument(document));\n    }, {\n      cache: false\n    });\n  };\n  DocumentTransform.prototype.getStableCacheEntry = function (document) {\n    if (!this.stableCacheKeys) return;\n    var cacheKeys = this.getCacheKey(document);\n    if (cacheKeys) {\n      invariant(Array.isArray(cacheKeys), 63);\n      return this.stableCacheKeys.lookupArray(cacheKeys);\n    }\n  };\n  return DocumentTransform;\n}();\nexport { DocumentTransform };","map":{"version":3,"names":["Trie","canUseWeakMap","canUseWeakSet","checkDocument","invariant","identity","document","DocumentTransform","transform","options","Object","create","resultCache","WeakSet","Set","getCacheKey","cache","stableCacheKeys","key","prototype","split","predicate","left","right","documentTransform","transformDocument","has","cacheEntry","getStableCacheEntry","value","transformedDocument","add","concat","otherTransform","_this","cacheKeys","Array","isArray","lookupArray"],"sources":["/Users/michaellin/side-projects/musicProject/my-app/client/node_modules/@apollo/src/utilities/graphql/DocumentTransform.ts"],"sourcesContent":["import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet } from \"../common/canUse.js\";\nimport { checkDocument } from \"./getFromAST.js\";\nimport { invariant } from \"../globals/index.js\";\nimport type { DocumentNode } from \"graphql\";\n\nexport type DocumentTransformCacheKey = ReadonlyArray<unknown>;\n\ntype TransformFn = (document: DocumentNode) => DocumentNode;\n\ninterface DocumentTransformOptions {\n  cache?: boolean;\n  getCacheKey?: (\n    document: DocumentNode\n  ) => DocumentTransformCacheKey | undefined;\n}\n\nfunction identity(document: DocumentNode) {\n  return document;\n}\n\nexport class DocumentTransform {\n  private readonly transform: TransformFn;\n\n  private readonly resultCache = canUseWeakSet\n    ? new WeakSet<DocumentNode>()\n    : new Set<DocumentNode>();\n\n  private stableCacheKeys:\n    | Trie<{ key: DocumentTransformCacheKey; value?: DocumentNode }>\n    | undefined;\n\n  // This default implementation of getCacheKey can be overridden by providing\n  // options.getCacheKey to the DocumentTransform constructor. In general, a\n  // getCacheKey function may either return an array of keys (often including\n  // the document) to be used as a cache key, or undefined to indicate the\n  // transform for this document should not be cached.\n  private getCacheKey(\n    document: DocumentNode\n  ): DocumentTransformCacheKey | undefined {\n    return [document];\n  }\n\n  static identity() {\n    // No need to cache this transform since it just returns the document\n    // unchanged. This should save a bit of memory that would otherwise be\n    // needed to populate the `documentCache` of this transform.\n    return new DocumentTransform(identity, { cache: false });\n  }\n\n  static split(\n    predicate: (document: DocumentNode) => boolean,\n    left: DocumentTransform,\n    right: DocumentTransform = DocumentTransform.identity()\n  ) {\n    return new DocumentTransform(\n      (document) => {\n        const documentTransform = predicate(document) ? left : right;\n\n        return documentTransform.transformDocument(document);\n      },\n      // Reasonably assume both `left` and `right` transforms handle their own caching\n      { cache: false }\n    );\n  }\n\n  constructor(\n    transform: TransformFn,\n    options: DocumentTransformOptions = Object.create(null)\n  ) {\n    this.transform = transform;\n\n    if (options.getCacheKey) {\n      // Override default `getCacheKey` function, which returns [document].\n      this.getCacheKey = options.getCacheKey;\n    }\n\n    if (options.cache !== false) {\n      this.stableCacheKeys = new Trie(canUseWeakMap, (key) => ({ key }));\n    }\n  }\n\n  transformDocument(document: DocumentNode) {\n    // If a user passes an already transformed result back to this function,\n    // immediately return it.\n    if (this.resultCache.has(document)) {\n      return document;\n    }\n\n    const cacheEntry = this.getStableCacheEntry(document);\n\n    if (cacheEntry && cacheEntry.value) {\n      return cacheEntry.value;\n    }\n\n    checkDocument(document);\n\n    const transformedDocument = this.transform(document);\n\n    this.resultCache.add(transformedDocument);\n\n    if (cacheEntry) {\n      cacheEntry.value = transformedDocument;\n    }\n\n    return transformedDocument;\n  }\n\n  concat(otherTransform: DocumentTransform) {\n    return new DocumentTransform(\n      (document) => {\n        return otherTransform.transformDocument(\n          this.transformDocument(document)\n        );\n      },\n      // Reasonably assume both transforms handle their own caching\n      { cache: false }\n    );\n  }\n\n  getStableCacheEntry(document: DocumentNode) {\n    if (!this.stableCacheKeys) return;\n    const cacheKeys = this.getCacheKey(document);\n    if (cacheKeys) {\n      invariant(\n        Array.isArray(cacheKeys),\n        \"`getCacheKey` must return an array or undefined\"\n      );\n      return this.stableCacheKeys.lookupArray(cacheKeys);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}