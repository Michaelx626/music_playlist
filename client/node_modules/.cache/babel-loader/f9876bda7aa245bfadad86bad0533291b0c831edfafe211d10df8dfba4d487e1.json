{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { isNetworkRequestSettled } from \"../../core/index.js\";\nimport { createFulfilledPromise, createRejectedPromise } from \"../../utilities/index.js\";\nvar QUERY_REFERENCE_SYMBOL = Symbol();\nexport function wrapQueryRef(internalQueryRef) {\n  var _a;\n  return _a = {}, _a[QUERY_REFERENCE_SYMBOL] = internalQueryRef, _a;\n}\nexport function unwrapQueryRef(queryRef) {\n  return queryRef[QUERY_REFERENCE_SYMBOL];\n}\nvar OBSERVED_CHANGED_OPTIONS = [\"canonizeResults\", \"context\", \"errorPolicy\", \"fetchPolicy\", \"refetchWritePolicy\", \"returnPartialData\"];\nvar InternalQueryReference = function () {\n  function InternalQueryReference(observable, options) {\n    var _this = this;\n    var _a;\n    this.listeners = new Set();\n    this.status = \"loading\";\n    this.references = 0;\n    this.handleNext = this.handleNext.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.dispose = this.dispose.bind(this);\n    this.observable = observable;\n    this.result = observable.getCurrentResult(false);\n    this.key = options.key;\n    if (options.onDispose) {\n      this.onDispose = options.onDispose;\n    }\n    if (isNetworkRequestSettled(this.result.networkStatus) || this.result.data && (!this.result.partial || this.watchQueryOptions.returnPartialData)) {\n      this.promise = createFulfilledPromise(this.result);\n      this.status = \"idle\";\n    } else {\n      this.promise = new Promise(function (resolve, reject) {\n        _this.resolve = resolve;\n        _this.reject = reject;\n      });\n    }\n    this.subscription = observable.filter(function (_a) {\n      var data = _a.data;\n      return !equal(data, {});\n    }).subscribe({\n      next: this.handleNext,\n      error: this.handleError\n    });\n    this.autoDisposeTimeoutId = setTimeout(this.dispose, (_a = options.autoDisposeTimeoutMs) !== null && _a !== void 0 ? _a : 30000);\n  }\n  Object.defineProperty(InternalQueryReference.prototype, \"watchQueryOptions\", {\n    get: function () {\n      return this.observable.options;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  InternalQueryReference.prototype.retain = function () {\n    var _this = this;\n    this.references++;\n    clearTimeout(this.autoDisposeTimeoutId);\n    var disposed = false;\n    return function () {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      _this.references--;\n      setTimeout(function () {\n        if (!_this.references) {\n          _this.dispose();\n        }\n      });\n    };\n  };\n  InternalQueryReference.prototype.didChangeOptions = function (watchQueryOptions) {\n    var _this = this;\n    return OBSERVED_CHANGED_OPTIONS.some(function (option) {\n      return !equal(_this.watchQueryOptions[option], watchQueryOptions[option]);\n    });\n  };\n  InternalQueryReference.prototype.applyOptions = function (watchQueryOptions) {\n    var _a = this.watchQueryOptions,\n      currentFetchPolicy = _a.fetchPolicy,\n      currentCanonizeResults = _a.canonizeResults;\n    if (currentFetchPolicy === \"standby\" && currentFetchPolicy !== watchQueryOptions.fetchPolicy) {\n      this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n    } else {\n      this.observable.silentSetOptions(watchQueryOptions);\n      if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {\n        this.result = __assign(__assign({}, this.result), this.observable.getCurrentResult());\n        this.promise = createFulfilledPromise(this.result);\n      }\n    }\n    return this.promise;\n  };\n  InternalQueryReference.prototype.listen = function (listener) {\n    var _this = this;\n    this.listeners.add(listener);\n    return function () {\n      _this.listeners.delete(listener);\n    };\n  };\n  InternalQueryReference.prototype.refetch = function (variables) {\n    return this.initiateFetch(this.observable.refetch(variables));\n  };\n  InternalQueryReference.prototype.fetchMore = function (options) {\n    return this.initiateFetch(this.observable.fetchMore(options));\n  };\n  InternalQueryReference.prototype.dispose = function () {\n    this.subscription.unsubscribe();\n    this.onDispose();\n  };\n  InternalQueryReference.prototype.onDispose = function () {};\n  InternalQueryReference.prototype.handleNext = function (result) {\n    var _a;\n    switch (this.status) {\n      case \"loading\":\n        {\n          if (result.data === void 0) {\n            result.data = this.result.data;\n          }\n          this.status = \"idle\";\n          this.result = result;\n          (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, result);\n          break;\n        }\n      case \"idle\":\n        {\n          if (result.data === this.result.data) {\n            return;\n          }\n          if (result.data === void 0) {\n            result.data = this.result.data;\n          }\n          this.result = result;\n          this.promise = createFulfilledPromise(result);\n          this.deliver(this.promise);\n          break;\n        }\n    }\n  };\n  InternalQueryReference.prototype.handleError = function (error) {\n    var _a;\n    this.subscription.unsubscribe();\n    this.subscription = this.observable.resubscribeAfterError(this.handleNext, this.handleError);\n    switch (this.status) {\n      case \"loading\":\n        {\n          this.status = \"idle\";\n          (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, error);\n          break;\n        }\n      case \"idle\":\n        {\n          this.promise = createRejectedPromise(error);\n          this.deliver(this.promise);\n        }\n    }\n  };\n  InternalQueryReference.prototype.deliver = function (promise) {\n    this.listeners.forEach(function (listener) {\n      return listener(promise);\n    });\n  };\n  InternalQueryReference.prototype.initiateFetch = function (returnedPromise) {\n    var _this = this;\n    this.status = \"loading\";\n    this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    this.promise.catch(function () {});\n    returnedPromise.then(function (result) {\n      var _a;\n      if (_this.status === \"loading\") {\n        _this.status = \"idle\";\n        _this.result = result;\n        (_a = _this.resolve) === null || _a === void 0 ? void 0 : _a.call(_this, result);\n      }\n    }).catch(function () {});\n    return returnedPromise;\n  };\n  return InternalQueryReference;\n}();\nexport { InternalQueryReference };","map":{"version":3,"names":["equal","isNetworkRequestSettled","createFulfilledPromise","createRejectedPromise","QUERY_REFERENCE_SYMBOL","Symbol","wrapQueryRef","internalQueryRef","_a","unwrapQueryRef","queryRef","OBSERVED_CHANGED_OPTIONS","InternalQueryReference","observable","options","_this","listeners","Set","status","references","handleNext","bind","handleError","dispose","result","getCurrentResult","key","onDispose","networkStatus","data","partial","watchQueryOptions","returnPartialData","promise","Promise","resolve","reject","subscription","filter","subscribe","next","error","autoDisposeTimeoutId","setTimeout","autoDisposeTimeoutMs","Object","defineProperty","prototype","get","retain","clearTimeout","disposed","didChangeOptions","some","option","applyOptions","currentFetchPolicy","fetchPolicy","currentCanonizeResults","canonizeResults","initiateFetch","reobserve","silentSetOptions","__assign","listen","listener","add","delete","refetch","variables","fetchMore","unsubscribe","call","deliver","resubscribeAfterError","forEach","returnedPromise","catch","then"],"sources":["/Users/michaellin/side-projects/musicProject/my-app/client/node_modules/@apollo/src/react/cache/QueryReference.ts"],"sourcesContent":["import { equal } from \"@wry/equality\";\nimport type {\n  ApolloError,\n  ApolloQueryResult,\n  ObservableQuery,\n  OperationVariables,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { isNetworkRequestSettled } from \"../../core/index.js\";\nimport type { ObservableSubscription } from \"../../utilities/index.js\";\nimport {\n  createFulfilledPromise,\n  createRejectedPromise,\n} from \"../../utilities/index.js\";\nimport type { CacheKey } from \"./types.js\";\nimport type { useBackgroundQuery, useReadQuery } from \"../hooks/index.js\";\n\ntype Listener<TData> = (promise: Promise<ApolloQueryResult<TData>>) => void;\n\ntype FetchMoreOptions<TData> = Parameters<\n  ObservableQuery<TData>[\"fetchMore\"]\n>[0];\n\nconst QUERY_REFERENCE_SYMBOL: unique symbol = Symbol();\n/**\n * A `QueryReference` is an opaque object returned by {@link useBackgroundQuery}.\n * A child component reading the `QueryReference` via {@link useReadQuery} will\n * suspend until the promise resolves.\n */\nexport interface QueryReference<TData = unknown> {\n  [QUERY_REFERENCE_SYMBOL]: InternalQueryReference<TData>;\n}\n\ninterface InternalQueryReferenceOptions {\n  key: CacheKey;\n  onDispose?: () => void;\n  autoDisposeTimeoutMs?: number;\n}\n\nexport function wrapQueryRef<TData>(\n  internalQueryRef: InternalQueryReference<TData>\n): QueryReference<TData> {\n  return { [QUERY_REFERENCE_SYMBOL]: internalQueryRef };\n}\n\nexport function unwrapQueryRef<TData>(\n  queryRef: QueryReference<TData>\n): InternalQueryReference<TData> {\n  return queryRef[QUERY_REFERENCE_SYMBOL];\n}\n\nconst OBSERVED_CHANGED_OPTIONS = [\n  \"canonizeResults\",\n  \"context\",\n  \"errorPolicy\",\n  \"fetchPolicy\",\n  \"refetchWritePolicy\",\n  \"returnPartialData\",\n] as const;\n\ntype ObservedOptions = Pick<\n  WatchQueryOptions,\n  (typeof OBSERVED_CHANGED_OPTIONS)[number]\n>;\n\nexport class InternalQueryReference<TData = unknown> {\n  public result: ApolloQueryResult<TData>;\n  public readonly key: CacheKey;\n  public readonly observable: ObservableQuery<TData>;\n\n  public promiseCache?: Map<CacheKey, Promise<ApolloQueryResult<TData>>>;\n  public promise: Promise<ApolloQueryResult<TData>>;\n\n  private subscription: ObservableSubscription;\n  private listeners = new Set<Listener<TData>>();\n  private autoDisposeTimeoutId: NodeJS.Timeout;\n  private status: \"idle\" | \"loading\" = \"loading\";\n\n  private resolve: ((result: ApolloQueryResult<TData>) => void) | undefined;\n  private reject: ((error: unknown) => void) | undefined;\n\n  private references = 0;\n\n  constructor(\n    observable: ObservableQuery<TData>,\n    options: InternalQueryReferenceOptions\n  ) {\n    this.handleNext = this.handleNext.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.dispose = this.dispose.bind(this);\n    this.observable = observable;\n    // Don't save this result as last result to prevent delivery of last result\n    // when first subscribing\n    this.result = observable.getCurrentResult(false);\n    this.key = options.key;\n\n    if (options.onDispose) {\n      this.onDispose = options.onDispose;\n    }\n\n    if (\n      isNetworkRequestSettled(this.result.networkStatus) ||\n      (this.result.data &&\n        (!this.result.partial || this.watchQueryOptions.returnPartialData))\n    ) {\n      this.promise = createFulfilledPromise(this.result);\n      this.status = \"idle\";\n    } else {\n      this.promise = new Promise((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      });\n    }\n\n    this.subscription = observable\n      .filter(({ data }) => !equal(data, {}))\n      .subscribe({\n        next: this.handleNext,\n        error: this.handleError,\n      });\n\n    // Start a timer that will automatically dispose of the query if the\n    // suspended resource does not use this queryRef in the given time. This\n    // helps prevent memory leaks when a component has unmounted before the\n    // query has finished loading.\n    this.autoDisposeTimeoutId = setTimeout(\n      this.dispose,\n      options.autoDisposeTimeoutMs ?? 30_000\n    );\n  }\n\n  get watchQueryOptions() {\n    return this.observable.options;\n  }\n\n  retain() {\n    this.references++;\n    clearTimeout(this.autoDisposeTimeoutId);\n    let disposed = false;\n\n    return () => {\n      if (disposed) {\n        return;\n      }\n\n      disposed = true;\n      this.references--;\n\n      // Wait before fully disposing in case the app is running in strict mode.\n      setTimeout(() => {\n        if (!this.references) {\n          this.dispose();\n        }\n      });\n    };\n  }\n\n  didChangeOptions(watchQueryOptions: ObservedOptions) {\n    return OBSERVED_CHANGED_OPTIONS.some(\n      (option) =>\n        !equal(this.watchQueryOptions[option], watchQueryOptions[option])\n    );\n  }\n\n  applyOptions(watchQueryOptions: ObservedOptions) {\n    const {\n      fetchPolicy: currentFetchPolicy,\n      canonizeResults: currentCanonizeResults,\n    } = this.watchQueryOptions;\n\n    // \"standby\" is used when `skip` is set to `true`. Detect when we've\n    // enabled the query (i.e. `skip` is `false`) to execute a network request.\n    if (\n      currentFetchPolicy === \"standby\" &&\n      currentFetchPolicy !== watchQueryOptions.fetchPolicy\n    ) {\n      this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n    } else {\n      this.observable.silentSetOptions(watchQueryOptions);\n\n      if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {\n        this.result = { ...this.result, ...this.observable.getCurrentResult() };\n        this.promise = createFulfilledPromise(this.result);\n      }\n    }\n\n    return this.promise;\n  }\n\n  listen(listener: Listener<TData>) {\n    this.listeners.add(listener);\n\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  refetch(variables: OperationVariables | undefined) {\n    return this.initiateFetch(this.observable.refetch(variables));\n  }\n\n  fetchMore(options: FetchMoreOptions<TData>) {\n    return this.initiateFetch(this.observable.fetchMore<TData>(options));\n  }\n\n  private dispose() {\n    this.subscription.unsubscribe();\n    this.onDispose();\n  }\n\n  private onDispose() {\n    // noop. overridable by options\n  }\n\n  private handleNext(result: ApolloQueryResult<TData>) {\n    switch (this.status) {\n      case \"loading\": {\n        // Maintain the last successful `data` value if the next result does not\n        // have one.\n        if (result.data === void 0) {\n          result.data = this.result.data;\n        }\n        this.status = \"idle\";\n        this.result = result;\n        this.resolve?.(result);\n        break;\n      }\n      case \"idle\": {\n        // This occurs when switching to a result that is fully cached when this\n        // class is instantiated. ObservableQuery will run reobserve when\n        // subscribing, which delivers a result from the cache.\n        if (result.data === this.result.data) {\n          return;\n        }\n\n        // Maintain the last successful `data` value if the next result does not\n        // have one.\n        if (result.data === void 0) {\n          result.data = this.result.data;\n        }\n\n        this.result = result;\n        this.promise = createFulfilledPromise(result);\n        this.deliver(this.promise);\n        break;\n      }\n    }\n  }\n\n  private handleError(error: ApolloError) {\n    this.subscription.unsubscribe();\n    this.subscription = this.observable.resubscribeAfterError(\n      this.handleNext,\n      this.handleError\n    );\n\n    switch (this.status) {\n      case \"loading\": {\n        this.status = \"idle\";\n        this.reject?.(error);\n        break;\n      }\n      case \"idle\": {\n        this.promise = createRejectedPromise(error);\n        this.deliver(this.promise);\n      }\n    }\n  }\n\n  private deliver(promise: Promise<ApolloQueryResult<TData>>) {\n    this.listeners.forEach((listener) => listener(promise));\n  }\n\n  private initiateFetch(returnedPromise: Promise<ApolloQueryResult<TData>>) {\n    this.status = \"loading\";\n\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n\n    this.promise.catch(() => {});\n\n    // If the data returned from the fetch is deeply equal to the data already\n    // in the cache, `handleNext` will not be triggered leaving the promise we\n    // created in a pending state forever. To avoid this situtation, we attempt\n    // to resolve the promise if `handleNext` hasn't been run to ensure the\n    // promise is resolved correctly.\n    returnedPromise\n      .then((result) => {\n        if (this.status === \"loading\") {\n          this.status = \"idle\";\n          this.result = result;\n          this.resolve?.(result);\n        }\n      })\n      .catch(() => {});\n\n    return returnedPromise;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}