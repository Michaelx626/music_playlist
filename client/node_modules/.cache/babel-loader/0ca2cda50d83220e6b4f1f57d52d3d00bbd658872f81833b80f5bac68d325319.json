{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { execute } from \"../link/core/index.js\";\nimport { hasDirectives, isExecutionPatchIncrementalResult, isExecutionPatchResult, removeDirectivesFromDocument } from \"../utilities/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, DocumentTransform } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError, graphQLResultHasProtocolErrors } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var _this = this;\n    var cache = _a.cache,\n      link = _a.link,\n      defaultOptions = _a.defaultOptions,\n      documentTransform = _a.documentTransform,\n      _b = _a.queryDeduplication,\n      queryDeduplication = _b === void 0 ? false : _b,\n      onBroadcast = _a.onBroadcast,\n      _c = _a.ssrMode,\n      ssrMode = _c === void 0 ? false : _c,\n      _d = _a.clientAwareness,\n      clientAwareness = _d === void 0 ? {} : _d,\n      localState = _a.localState,\n      _e = _a.assumeImmutableResults,\n      assumeImmutableResults = _e === void 0 ? !!cache.assumeImmutableResults : _e;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    var defaultDocumentTransform = new DocumentTransform(function (document) {\n      return _this.cache.transformDocument(document);\n    }, {\n      cache: false\n    });\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = assumeImmutableResults;\n    this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform).concat(defaultDocumentTransform) : defaultDocumentTransform;\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(newInvariantError(23));\n  };\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n  QueryManager.prototype.mutate = function (_a) {\n    var _b, _c;\n    var mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      updateQueries = _a.updateQueries,\n      _d = _a.refetchQueries,\n      refetchQueries = _d === void 0 ? [] : _d,\n      _e = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _e === void 0 ? false : _e,\n      updateWithProxyFn = _a.update,\n      onQueryUpdated = _a.onQueryUpdated,\n      _f = _a.fetchPolicy,\n      fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f,\n      _g = _a.errorPolicy,\n      errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g,\n      keepRootFields = _a.keepRootFields,\n      context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, hasClientExports, mutationStoreValue, self;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            invariant(mutation, 24);\n            invariant(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 25);\n            mutationId = this.generateMutationId();\n            mutation = this.cache.transformForLink(this.transform(mutation));\n            hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n            variables = this.getVariables(mutation, variables);\n            if (!hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n          case 1:\n            variables = _h.sent();\n            _h.label = 2;\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n                context: context,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn,\n                keepRootFields: keepRootFields\n              });\n            }\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n                  throw new ApolloError({\n                    graphQLErrors: getGraphQLErrorsFromResult(result)\n                  });\n                }\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n                var storeResult = __assign({}, result);\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n                if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: optimisticResponse ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                    resolve(storeResult);\n                  }\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: \"ROOT_MUTATION\",\n          query: mutation.document,\n          variables: mutation.variables\n        });\n      }\n      if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n        var diff = cache.diff({\n          id: \"ROOT_MUTATION\",\n          query: this.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true\n        });\n        var mergedData = void 0;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== \"undefined\") {\n          result.data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: \"ROOT_MUTATION\",\n            query: mutation.document,\n            variables: mutation.variables\n          });\n        }\n      }\n      var updateQueries_1 = mutation.updateQueries;\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n          var updater = updateQueries_1[queryName];\n          var _b = _this.queries.get(queryId),\n            document = _b.document,\n            variables = _b.variables;\n          var _c = cache.diff({\n              query: document,\n              variables: variables,\n              returnPartialData: true,\n              optimistic: false\n            }),\n            currentQueryResult = _c.result,\n            complete = _c.complete;\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: \"ROOT_QUERY\",\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n          var update = mutation.update;\n          var isFinalResult = !isExecutionPatchResult(result) || isExecutionPatchIncrementalResult(result) && !result.hasNext;\n          if (update) {\n            if (!skipCache) {\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                query: _this.getDocumentInfo(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n                if (\"incremental\" in result) {\n                  delete result.incremental;\n                }\n                if (\"hasNext\" in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n            if (isFinalResult) {\n              update(cache, result, {\n                context: mutation.context,\n                variables: mutation.variables\n              });\n            }\n          }\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: \"ROOT_MUTATION\",\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                  DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        optimistic: false,\n        removeOptimistic: mutation.removeOptimistic,\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n    return Promise.resolve(result);\n  };\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        globalThis.__DEV__ !== false && invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast.promise;\n  };\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n  QueryManager.prototype.transform = function (document) {\n    return this.documentTransform.transformDocument(document);\n  };\n  QueryManager.prototype.getDocumentInfo = function (document) {\n    var transformCache = this.transformCache;\n    if (!transformCache.has(document)) {\n      var cacheEntry = {\n        hasClientExports: hasClientExports(document),\n        hasForcedResolvers: this.localState.shouldForceResolvers(document),\n        hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n        clientQuery: this.localState.clientQuery(document),\n        serverQuery: removeDirectivesFromDocument([{\n          name: \"client\",\n          remove: true\n        }, {\n          name: \"connection\"\n        }, {\n          name: \"nonreactive\"\n        }], document),\n        defaultVars: getDefaultValues(getOperationDefinition(document)),\n        asQuery: __assign(__assign({}, document), {\n          definitions: document.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n            return def;\n          })\n        })\n      };\n      transformCache.set(document, cacheEntry);\n    }\n    return transformCache.get(document);\n  };\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.getDocumentInfo(document).defaultVars), variables);\n  };\n  QueryManager.prototype.watchQuery = function (options) {\n    var query = this.transform(options.query);\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(query, options.variables)\n    });\n    if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n      options.notifyOnNetworkStatusChange = false;\n    }\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    observable[\"lastQuery\"] = query;\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n    invariant(options.query, 26);\n    invariant(options.query.kind === \"Document\", 27);\n    invariant(!options.returnPartialData, 28);\n    invariant(!options.pollInterval, 29);\n    return this.fetchQuery(queryId, __assign(__assign({}, options), {\n      query: this.transform(options.query)\n    })).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n    this.cancelPendingFetches(newInvariantError(30));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n    return this.cache.reset(options);\n  };\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n    if (include === void 0) {\n      include = \"active\";\n    }\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc), false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n        document = _a.document;\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n        var queryName = oq.queryName,\n          fetchPolicy = oq.options.fetchPolicy;\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n    if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          globalThis.__DEV__ !== false && invariant.warn(typeof nameOrDoc === \"string\" ? 31 : 32, nameOrDoc);\n        }\n      });\n    }\n    return queries;\n  };\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n    var query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      _b = _a.errorPolicy,\n      errorPolicy = _b === void 0 ? \"none\" : _b,\n      variables = _a.variables,\n      _c = _a.context,\n      context = _c === void 0 ? {} : _c;\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== \"no-cache\") {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: \"ROOT_SUBSCRIPTION\",\n              variables: variables\n            });\n          }\n          _this.broadcastQueries();\n        }\n        var hasErrors = graphQLResultHasError(result);\n        var hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n        if (hasErrors || hasProtocolErrors) {\n          var errors = {};\n          if (hasErrors) {\n            errors.graphQLErrors = result.errors;\n          }\n          if (hasProtocolErrors) {\n            errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n          }\n          if (errorPolicy === \"none\" || hasProtocolErrors) {\n            throw new ApolloError(errors);\n          }\n        }\n        if (errorPolicy === \"ignore\") {\n          delete result.errors;\n        }\n        return result;\n      });\n    };\n    if (this.getDocumentInfo(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n    return makeObservable(variables);\n  };\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n    var _a;\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n    var observable;\n    var _b = this.getDocumentInfo(query),\n      serverQuery = _b.serverQuery,\n      clientQuery = _b.clientQuery;\n    if (serverQuery) {\n      var _c = this,\n        inFlightLinkObservables_1 = _c.inFlightLinkObservables,\n        link = _c.link;\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n      if (deduplication) {\n        var printedServerQuery_1 = print(serverQuery);\n        var byVariables_1 = inFlightLinkObservables_1.get(printedServerQuery_1) || new Map();\n        inFlightLinkObservables_1.set(printedServerQuery_1, byVariables_1);\n        var varJson_1 = canonicalStringify(variables);\n        observable = byVariables_1.get(varJson_1);\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.beforeNext(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(printedServerQuery_1);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n    return observable;\n  };\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    var linkDocument = this.cache.transformForLink(options.query);\n    return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n      var graphQLErrors = getGraphQLErrorsFromResult(result);\n      var hasErrors = graphQLErrors.length > 0;\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: graphQLErrors\n          }));\n        }\n        queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = graphQLErrors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n      throw error;\n    });\n  };\n  QueryManager.prototype.fetchConcastWithInfo = function (queryId, options, networkStatus) {\n    var _this = this;\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n    var query = options.query;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n      _b = options.errorPolicy,\n      errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n      _c = options.returnPartialData,\n      returnPartialData = _c === void 0 ? false : _c,\n      _d = options.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n      _e = options.context,\n      context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n      if (normalized.fetchPolicy !== \"standby\" && sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n      return sourcesWithInfo;\n    };\n    var cleanupCancelFn = function () {\n      return _this.fetchCancelFns.delete(queryId);\n    };\n    this.fetchCancelFns.set(queryId, function (reason) {\n      cleanupCancelFn();\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast, containsDataFromLink;\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      concast = new Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function (sourcesWithInfo) {\n        return sourcesWithInfo.sources;\n      }));\n      containsDataFromLink = true;\n    } else {\n      var sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      concast = new Concast(sourcesWithInfo.sources);\n    }\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n    return {\n      concast: concast,\n      fromLink: containsDataFromLink\n    };\n  };\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n    var updateCache = _a.updateCache,\n      include = _a.include,\n      _b = _a.optimistic,\n      optimistic = _b === void 0 ? false : _b,\n      _c = _a.removeOptimistic,\n      removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n      onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n    var results = new Map();\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        optimistic: optimistic && removeOptimistic || false,\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n          if (oq) {\n            if (onQueryUpdated) {\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n              if (result === true) {\n                result = oq.refetch();\n              }\n              if (result !== false) {\n                results.set(oq, result);\n              }\n              return result;\n            }\n            if (onQueryUpdated !== null) {\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n          lastDiff = _a.lastDiff,\n          diff = _a.diff;\n        var result;\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset();\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n        if (result !== false) {\n          results.set(oq, result);\n        }\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n    if (removeOptimistic) {\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n    return results;\n  };\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n    var _this = this;\n    var query = _a.query,\n      variables = _a.variables,\n      fetchPolicy = _a.fetchPolicy,\n      refetchWritePolicy = _a.refetchWritePolicy,\n      errorPolicy = _a.errorPolicy,\n      returnPartialData = _a.returnPartialData,\n      context = _a.context,\n      notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n    var readCache = function () {\n      return queryInfo.getDiff();\n    };\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n      var data = diff.result;\n      if (globalThis.__DEV__ !== false && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n      if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n      if (errorPolicy === \"none\" && networkStatus === NetworkStatus.refetch && Array.isArray(diff.missing)) {\n        return fromData(void 0);\n      }\n      return fromData(data);\n    };\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 : 2;\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        query: query,\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n          if (diff.complete) {\n            return {\n              fromLink: false,\n              sources: [resultsFromCache(diff, queryInfo.markReady())]\n            };\n          }\n          if (returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          sources: [resultsFromCache(readCache(), queryInfo.markReady())]\n        };\n      case \"network-only\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(readCache()), resultsFromLink()]\n          };\n        }\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n      case \"no-cache\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()]\n          };\n        }\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n      case \"standby\":\n        return {\n          fromLink: false,\n          sources: []\n        };\n    }\n  };\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId);\n  };\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n  return QueryManager;\n}();\nexport { QueryManager };","map":{"version":3,"names":["invariant","newInvariantError","equal","execute","hasDirectives","isExecutionPatchIncrementalResult","isExecutionPatchResult","removeDirectivesFromDocument","canonicalStringify","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","getGraphQLErrorsFromResult","canUseWeakMap","Observable","asyncMap","isNonEmptyArray","Concast","makeUniqueId","isDocumentNode","isNonNullObject","DocumentTransform","mergeIncrementalData","ApolloError","isApolloError","graphQLResultHasProtocolErrors","ObservableQuery","logMissingFieldErrors","NetworkStatus","isNetworkRequestInFlight","LocalState","QueryInfo","shouldWriteResult","PROTOCOL_ERRORS_SYMBOL","print","hasOwnProperty","Object","prototype","QueryManager","_a","_this","cache","link","defaultOptions","documentTransform","_b","queryDeduplication","onBroadcast","_c","ssrMode","_d","clientAwareness","localState","_e","assumeImmutableResults","queries","Map","fetchCancelFns","transformCache","WeakMap","queryIdCounter","requestIdCounter","mutationIdCounter","inFlightLinkObservables","defaultDocumentTransform","document","transformDocument","create","concat","mutationStore","stop","forEach","_info","queryId","stopQueryNoBroadcast","cancelPendingFetches","error","cancel","clear","mutate","mutation","variables","optimisticResponse","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","onQueryUpdated","_f","fetchPolicy","_g","errorPolicy","keepRootFields","context","mutationId","generateMutationId","transformForLink","transform","getDocumentInfo","getVariables","addExportedVariables","_h","sent","mutationStoreValue","loading","markMutationOptimistic","broadcastQueries","self","Promise","resolve","reject","getObservableFromLink","__assign","result","graphQLErrors","storeResult","errors","markMutationResult","removeOptimistic","subscribe","next","hasNext","err","networkError","cacheWrites","skipCache","push","data","dataId","query","incremental","diff","id","asQuery","optimistic","returnPartialData","mergedData","updateQueries_1","observableQuery","queryName","call","updater","get","currentQueryResult","complete","nextQueryResult","mutationResult","queryVariables","length","results_1","updateCache","write","isFinalResult","modify","fields","value","fieldName","DELETE","include","all","then","recordOptimisticTransaction","globalThis","__DEV__","fetchQuery","options","networkStatus","fetchConcastWithInfo","concast","promise","getQueryStore","store","info","resetErrors","queryInfo","undefined","has","cacheEntry","hasForcedResolvers","shouldForceResolvers","hasNonreactiveDirective","clientQuery","serverQuery","name","remove","defaultVars","definitions","map","def","kind","operation","set","watchQuery","notifyOnNetworkStatusChange","observable","queryManager","init","generateQueryId","pollInterval","finally","stopQuery","String","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","clearStore","discardWatches","reset","getObservableQueries","queryNamesAndDocs","legacyQueryOptions","Set","Array","isArray","desc","add","oq","hasObservers","size","getQuery","setObservableQuery","included","nameOrDoc","warn","reFetchObservableQueries","includeStandby","observableQueryPromises","resetLastResults","refetch","setDiff","startGraphQLSubscription","makeObservable","hasProtocolErrors","hasErrors","protocolErrors","extensions","observablePromise_1","observer","sub","unsubscribe","removeQuery","delete","notify","getLocalState","deduplication","inFlightLinkObservables_1","operationName","prepareContext","forceFetch","printedServerQuery_1","byVariables_1","varJson_1","beforeNext","of","runResolvers","remoteResult","getResultsFromLink","cacheWriteBehavior","requestId","lastRequestId","linkDocument","markError","markResult","markReady","aqr","ready","defaults","normalized","assign","fromVariables","sourcesWithInfo","fetchQueryByPolicy","sources","cleanupCancelFn","reason","setTimeout","containsDataFromLink","fromLink","includedQueriesById","lastDiff","getDiff","batch","onWatchUpdated","watch","watcher","results","indexOf","refetchWritePolicy","oldNetworkStatus","readCache","resultsFromCache","missing","fromData","partial","onlyRunForcedResolvers","resolved","resultsFromLink","shouldNotify","newContext"],"sources":["/Users/michaellin/side-projects/musicProject/my-app/client/node_modules/@apollo/src/core/QueryManager.ts"],"sourcesContent":["import { invariant, newInvariantError } from \"../utilities/globals/index.js\";\n\nimport type { DocumentNode } from \"graphql\";\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from \"@wry/equality\";\n\nimport type { ApolloLink, FetchResult } from \"../link/core/index.js\";\nimport { execute } from \"../link/core/index.js\";\nimport {\n  hasDirectives,\n  isExecutionPatchIncrementalResult,\n  isExecutionPatchResult,\n  removeDirectivesFromDocument,\n} from \"../utilities/index.js\";\nimport type { Cache, ApolloCache } from \"../cache/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\n\nimport type {\n  ObservableSubscription,\n  ConcastSourcesArray,\n} from \"../utilities/index.js\";\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  getGraphQLErrorsFromResult,\n  canUseWeakMap,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n  DocumentTransform,\n} from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport {\n  ApolloError,\n  isApolloError,\n  graphQLResultHasProtocolErrors,\n} from \"../errors/index.js\";\nimport type {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from \"./watchQueryOptions.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n} from \"./types.js\";\nimport { LocalState } from \"./LocalState.js\";\n\nimport type { QueryStoreValue } from \"./QueryInfo.js\";\nimport {\n  QueryInfo,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from \"./QueryInfo.js\";\nimport type { ApolloErrorOptions } from \"../errors/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\n\nconst { hasOwnProperty } = Object.prototype;\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  hasNonreactiveDirective: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\nimport type { DefaultOptions } from \"./ApolloClient.js\";\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public defaultOptions: DefaultOptions;\n\n  public readonly assumeImmutableResults: boolean;\n  public readonly documentTransform: DocumentTransform;\n  public readonly ssrMode: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    defaultOptions,\n    documentTransform,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults = !!cache.assumeImmutableResults,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    defaultOptions?: DefaultOptions;\n    documentTransform?: DocumentTransform;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    const defaultDocumentTransform = new DocumentTransform(\n      (document) => this.cache.transformDocument(document),\n      // Allow the apollo cache to manage its own transform caches\n      { cache: false }\n    );\n\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = assumeImmutableResults;\n    this.documentTransform = documentTransform\n      ? defaultDocumentTransform\n          .concat(documentTransform)\n          // The custom document transform may add new fragment spreads or new\n          // field selections, so we want to give the cache a chance to run\n          // again. For example, the InMemoryCache adds __typename to field\n          // selections and fragments from the fragment registry.\n          .concat(defaultDocumentTransform)\n      : defaultDocumentTransform;\n\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      newInvariantError(\"QueryManager stopped while query was in flight\")\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach((cancel) => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables extends OperationVariables,\n    TContext extends Record<string, any>,\n    TCache extends ApolloCache<any>,\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    fetchPolicy = this.defaultOptions.mutate?.fetchPolicy || \"network-only\",\n    errorPolicy = this.defaultOptions.mutate?.errorPolicy || \"none\",\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<\n    FetchResult<TData>\n  > {\n    invariant(\n      mutation,\n      \"mutation option is required. You must specify your GraphQL document in the mutation option.\"\n    );\n\n    invariant(\n      fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\",\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n\n    mutation = this.cache.transformForLink(this.transform(mutation));\n    const { hasClientExports } = this.getDocumentInfo(mutation);\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n    if (hasClientExports) {\n      variables = (await this.localState.addExportedVariables(\n        mutation,\n        variables,\n        context\n      )) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    if (optimisticResponse) {\n      this.markMutationOptimistic<TData, TVariables, TContext, TCache>(\n        optimisticResponse,\n        {\n          mutationId,\n          document: mutation,\n          variables,\n          fetchPolicy,\n          errorPolicy,\n          context,\n          updateQueries,\n          update: updateWithProxyFn,\n          keepRootFields,\n        }\n      );\n    }\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse,\n          },\n          variables,\n          false\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n            throw new ApolloError({\n              graphQLErrors: getGraphQLErrorsFromResult(result),\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<TData, TVariables, TContext, TCache>({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: optimisticResponse ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        }\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // Since mutations might receive multiple payloads from the\n          // ApolloLink chain (e.g. when used with @defer),\n          // we resolve with a SingleExecutionResult or after the final\n          // ExecutionPatchResult has arrived and we have assembled the\n          // multipart response into a single result.\n          if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n            resolve(storeResult);\n          }\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError\n              ? err\n              : new ApolloError({\n                  networkError: err,\n                })\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>,\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: \"ROOT_MUTATION\",\n          query: mutation.document,\n          variables: mutation.variables,\n        });\n      }\n      if (\n        isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)\n      ) {\n        const diff = cache.diff<TData>({\n          id: \"ROOT_MUTATION\",\n          // The cache complains if passed a mutation where it expects a\n          // query, so we transform mutations and subscriptions to queries\n          // (only once, thanks to this.transformCache).\n          query: this.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true,\n        });\n        let mergedData;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== \"undefined\") {\n          // cast the ExecutionPatchResult to FetchResult here since\n          // ExecutionPatchResult never has `data` when returned from the server\n          (result as FetchResult).data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: \"ROOT_MUTATION\",\n            query: mutation.document,\n            variables: mutation.variables,\n          });\n        }\n      }\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: (document && getOperationName(document)) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: \"ROOT_QUERY\",\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      mutation.refetchQueries ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache: TCache) => {\n          if (!skipCache) {\n            cacheWrites.forEach((write) => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          // Determine whether result is a SingleExecutionResult,\n          // or the final ExecutionPatchResult.\n          const isFinalResult =\n            !isExecutionPatchResult(result) ||\n            (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.getDocumentInfo(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...(result as FetchResult), data: diff.result };\n                if (\"incremental\" in result) {\n                  delete result.incremental;\n                }\n                if (\"hasNext\" in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n\n            // If we've received the whole response,\n            // either a SingleExecutionResult or the final ExecutionPatchResult,\n            // call the update function.\n            if (isFinalResult) {\n              update(cache, result, {\n                context: mutation.context,\n                variables: mutation.variables,\n              });\n            }\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: \"ROOT_MUTATION\",\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n      }).forEach((result) => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>,\n  >(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean;\n    }\n  ) {\n    const data =\n      typeof optimisticResponse === \"function\"\n        ? optimisticResponse(mutation.variables)\n        : optimisticResponse;\n\n    return this.cache.recordOptimisticTransaction((cache) => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>(\n          {\n            ...mutation,\n            result: { data },\n          },\n          cache\n        );\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n  }\n\n  public fetchQuery<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast\n      .promise;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  public transform(document: DocumentNode) {\n    return this.documentTransform.transformDocument(document);\n  }\n\n  private transformCache = new (canUseWeakMap ? WeakMap : Map)<\n    DocumentNode,\n    TransformCacheEntry\n  >();\n\n  public getDocumentInfo(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const cacheEntry: TransformCacheEntry = {\n        // TODO These three calls (hasClientExports, shouldForceResolvers, and\n        // usesNonreactiveDirective) are performing independent full traversals\n        // of the transformed document. We should consider merging these\n        // traversals into a single pass in the future, though the work is\n        // cached after the first time.\n        hasClientExports: hasClientExports(document),\n        hasForcedResolvers: this.localState.shouldForceResolvers(document),\n        hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n        clientQuery: this.localState.clientQuery(document),\n        serverQuery: removeDirectivesFromDocument(\n          [\n            { name: \"client\", remove: true },\n            { name: \"connection\" },\n            { name: \"nonreactive\" },\n          ],\n          document\n        ),\n        defaultVars: getDefaultValues(\n          getOperationDefinition(document)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...document,\n          definitions: document.definitions.map((def) => {\n            if (\n              def.kind === \"OperationDefinition\" &&\n              def.operation !== \"query\"\n            ) {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        },\n      };\n\n      transformCache.set(document, cacheEntry);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables\n  ): OperationVariables {\n    return {\n      ...this.getDocumentInfo(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<\n    T,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: WatchQueryOptions<TVariables, T>): ObservableQuery<T, TVariables> {\n    const query = this.transform(options.query);\n\n    // assign variable default values if supplied\n    // NOTE: We don't modify options.query here with the transformed query to\n    // ensure observable.options.query is set to the raw untransformed query.\n    options = {\n      ...options,\n      variables: this.getVariables(query, options.variables) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n    observable[\"lastQuery\"] = query;\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    // We give queryInfo the transformed query to ensure the first cache diff\n    // uses the transformed query instead of the raw query\n    queryInfo.init({\n      document: query,\n      observableQuery: observable,\n      variables: observable.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars extends OperationVariables = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId()\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      \"query option is required. You must specify your GraphQL document \" +\n        \"in the query option.\"\n    );\n\n    invariant(\n      options.query.kind === \"Document\",\n      'You must wrap the query string in a \"gql\" tag.'\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      \"returnPartialData option only supported on watchQuery.\"\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      \"pollInterval option only supported on watchQuery.\"\n    );\n\n    return this.fetchQuery<TData, TVars>(queryId, {\n      ...options,\n      query: this.transform(options.query),\n    }).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(\n    options: Cache.ResetOptions = {\n      discardWatches: true,\n    }\n  ): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(\n      newInvariantError(\n        \"Store reset while query was in flight (not completed in link chain)\"\n      )\n    );\n\n    this.queries.forEach((queryInfo) => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\"\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach((desc) => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc), false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(\n            typeof nameOrDoc === \"string\"\n              ? `Unknown query named \"%s\" requested in refetchQueries options.include array`\n              : `Unknown query %s requested in refetchQueries options.include array`,\n            nameOrDoc\n          );\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(\n      (observableQuery, queryId) => {\n        const { fetchPolicy } = observableQuery.options;\n        observableQuery.resetLastResults();\n        if (\n          includeStandby ||\n          (fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\")\n        ) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n        this.getQuery(queryId).setDiff(null);\n      }\n    );\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy = \"none\",\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(query, context, variables).map((result) => {\n        if (fetchPolicy !== \"no-cache\") {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: \"ROOT_SUBSCRIPTION\",\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        const hasErrors = graphQLResultHasError(result);\n        const hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n        if (hasErrors || hasProtocolErrors) {\n          const errors: ApolloErrorOptions = {};\n          if (hasErrors) {\n            errors.graphQLErrors = result.errors;\n          }\n          if (hasProtocolErrors) {\n            errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n          }\n\n          // `errorPolicy` is a mechanism for handling GraphQL errors, according\n          // to our documentation, so we throw protocol errors regardless of the\n          // set error policy.\n          if (errorPolicy === \"none\" || hasProtocolErrors) {\n            throw new ApolloError(errors);\n          }\n        }\n\n        if (errorPolicy === \"ignore\") {\n          delete result.errors;\n        }\n\n        return result;\n      });\n\n    if (this.getDocumentInfo(query).hasClientExports) {\n      const observablePromise = this.localState\n        .addExportedVariables(query, variables, context)\n        .then(makeObservable);\n\n      return new Observable<FetchResult<T>>((observer) => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          (observable) => (sub = observable.subscribe(observer)),\n          observer.error\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach((info) => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected inFlightLinkObservables = new Map<\n    string,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    // Prefer context.queryDeduplication if specified.\n    deduplication: boolean = context?.queryDeduplication ??\n      this.queryDeduplication\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery, clientQuery } = this.getDocumentInfo(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication,\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const printedServerQuery = print(serverQuery);\n        const byVariables =\n          inFlightLinkObservables.get(printedServerQuery) || new Map();\n        inFlightLinkObservables.set(printedServerQuery, byVariables);\n\n        const varJson = canonicalStringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>,\n          ]);\n\n          byVariables.set(varJson, (observable = concast));\n\n          concast.beforeNext(() => {\n            if (byVariables.delete(varJson) && byVariables.size < 1) {\n              inFlightLinkObservables.delete(printedServerQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>,\n        ]);\n      }\n    } else {\n      observable = new Concast([Observable.of({ data: {} } as FetchResult<T>)]);\n      context = this.prepareContext(context);\n    }\n\n    if (clientQuery) {\n      observable = asyncMap(observable, (result) => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<\n      WatchQueryOptions<TVars, TData>,\n      \"query\" | \"variables\" | \"context\" | \"fetchPolicy\" | \"errorPolicy\"\n    >\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = (queryInfo.lastRequestId = this.generateRequestId());\n\n    // Performing transformForLink here gives this.cache a chance to fill in\n    // missing fragment definitions (for example) before sending this document\n    // through the link chain.\n    const linkDocument = this.cache.transformForLink(options.query);\n\n    return asyncMap(\n      this.getObservableFromLink(\n        linkDocument,\n        options.context,\n        options.variables\n      ),\n\n      (result) => {\n        const graphQLErrors = getGraphQLErrorsFromResult(result);\n        const hasErrors = graphQLErrors.length > 0;\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(\n              new ApolloError({\n                graphQLErrors,\n              })\n            );\n          }\n          // Use linkDocument rather than queryInfo.document so the\n          // operation/fragments used to write the result are the same as the\n          // ones used to obtain it from the link.\n          queryInfo.markResult(\n            result,\n            linkDocument,\n            options,\n            cacheWriteBehavior\n          );\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = graphQLErrors;\n          aqr.networkStatus = NetworkStatus.error;\n        }\n\n        return aqr;\n      },\n\n      (networkError) => {\n        const error = isApolloError(networkError)\n          ? networkError\n          : new ApolloError({ networkError });\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      }\n    );\n  }\n\n  private fetchConcastWithInfo<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading\n  ): ConcastAndInfo<TData> {\n    const { query } = options;\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    const defaults = this.defaultOptions.watchQuery;\n    let {\n      fetchPolicy = (defaults && defaults.fetchPolicy) || \"cache-first\",\n      errorPolicy = (defaults && defaults.errorPolicy) || \"none\",\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n\n      const sourcesWithInfo = this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus\n      );\n\n      if (\n        // If we're in standby, postpone advancing options.fetchPolicy using\n        // applyNextFetchPolicy.\n        normalized.fetchPolicy !== \"standby\" &&\n        // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n        // this is another way to detect when nothing was done/fetched.\n        sourcesWithInfo.sources.length > 0 &&\n        queryInfo.observableQuery\n      ) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\n          \"after-fetch\",\n          options\n        );\n      }\n\n      return sourcesWithInfo;\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    const cleanupCancelFn = () => this.fetchCancelFns.delete(queryId);\n    this.fetchCancelFns.set(queryId, (reason) => {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    let concast: Concast<ApolloQueryResult<TData>>,\n      containsDataFromLink: boolean;\n    // If the query has @export(as: ...) directives, then we need to\n    // process those directives asynchronously. When there are no\n    // @export directives (the common case), we deliberately avoid\n    // wrapping the result of this.fetchQueryByPolicy in a Promise,\n    // since the timing of result delivery is (unfortunately) important\n    // for backwards compatibility. TODO This code could be simpler if\n    // we deprecated and removed LocalState.\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      concast = new Concast(\n        this.localState\n          .addExportedVariables(\n            normalized.query,\n            normalized.variables,\n            normalized.context\n          )\n          .then(fromVariables)\n          .then((sourcesWithInfo) => sourcesWithInfo.sources)\n      );\n      // there is just no way we can synchronously get the *right* value here,\n      // so we will assume `true`, which is the behaviour before the bug fix in\n      // #10597. This means that bug is not fixed in that case, and is probably\n      // un-fixable with reasonable effort for the edge case of @export as\n      // directives.\n      containsDataFromLink = true;\n    } else {\n      const sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      concast = new Concast(sourcesWithInfo.sources);\n    }\n\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n\n    return {\n      concast,\n      fromLink: containsDataFromLink,\n    };\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<\n    ApolloCache<TStore>,\n    TResult\n  >): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<\n      string,\n      {\n        oq: ObservableQuery<any>;\n        lastDiff?: Cache.DiffResult<any>;\n        diff?: Cache.DiffResult<any>;\n      }\n    >();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map();\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: (optimistic && removeOptimistic) || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(\n                  oq,\n                  result as InternalRefetchQueriesResult<TResult>\n                );\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result:\n          | TResult\n          | boolean\n          | Promise<ApolloQueryResult<any>>\n          | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    {\n      query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus\n  ): SourcesAndInfo<TData> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: query,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff();\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) =>\n        Observable.of({\n          data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus,\n          ...(diff.complete ? null : { partial: true }),\n        } as ApolloQueryResult<TData>);\n\n      if (data && this.getDocumentInfo(query).hasForcedResolvers) {\n        return this.localState\n          .runResolvers({\n            document: query,\n            remoteResult: { data },\n            context,\n            variables,\n            onlyRunForcedResolvers: true,\n          })\n          .then((resolved) => fromData(resolved.data || void 0));\n      }\n\n      // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n      // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n      // data was incorrectly returned from the cache on refetch:\n      // if diff.missing exists, we should not return cache data.\n      if (\n        errorPolicy === \"none\" &&\n        networkStatus === NetworkStatus.refetch &&\n        Array.isArray(diff.missing)\n      ) {\n        return fromData(void 0);\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\"\n        ? CacheWriteBehavior.FORBID\n        : // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n        networkStatus === NetworkStatus.refetch &&\n          refetchWritePolicy !== \"merge\"\n        ? CacheWriteBehavior.OVERWRITE\n        : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () =>\n      this.getResultsFromLink<TData, TVars>(queryInfo, cacheWriteBehavior, {\n        query,\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      });\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\": {\n        const diff = readCache();\n\n        if (diff.complete) {\n          return {\n            fromLink: false,\n            sources: [resultsFromCache(diff, queryInfo.markReady())],\n          };\n        }\n\n        if (returnPartialData || shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(diff), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n      }\n\n      case \"cache-and-network\": {\n        const diff = readCache();\n\n        if (diff.complete || returnPartialData || shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(diff), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n      }\n\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          sources: [resultsFromCache(readCache(), queryInfo.markReady())],\n        };\n\n      case \"network-only\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(readCache()), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n\n      case \"no-cache\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            // Note that queryInfo.getDiff() for no-cache queries does not call\n            // cache.diff, but instead returns a { complete: false } stub result\n            // when there is no queryInfo.diff already defined.\n            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n\n      case \"standby\":\n        return { fromLink: false, sources: [] };\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n\n// Return types used by fetchQueryByPolicy and other private methods above.\ninterface FetchConcastInfo {\n  // Metadata properties that can be returned in addition to the Concast.\n  fromLink: boolean;\n}\ninterface SourcesAndInfo<TData> extends FetchConcastInfo {\n  sources: ConcastSourcesArray<ApolloQueryResult<TData>>;\n}\ninterface ConcastAndInfo<TData> extends FetchConcastInfo {\n  concast: Concast<ApolloQueryResult<TData>>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}