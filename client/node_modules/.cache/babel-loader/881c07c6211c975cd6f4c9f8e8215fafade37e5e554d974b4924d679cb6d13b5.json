{"ast":null,"code":"import { parentEntrySlot } from \"./context.js\";\nimport { maybeUnsubscribe, arrayFromSet } from \"./helpers.js\";\nconst emptySetPool = [];\nconst POOL_TARGET_SIZE = 100;\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition, optionalMessage) {\n  if (!condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\nfunction valueIs(a, b) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\nfunction valueGet(value) {\n  switch (value.length) {\n    case 0:\n      throw new Error(\"unknown value\");\n    case 1:\n      return value[0];\n    case 2:\n      throw value[1];\n  }\n}\nfunction valueCopy(value) {\n  return value.slice(0);\n}\nexport class Entry {\n  constructor(fn) {\n    this.fn = fn;\n    this.parents = new Set();\n    this.childValues = new Map();\n    // When this Entry has children that are dirty, this property becomes\n    // a Set containing other Entry objects, borrowed from emptySetPool.\n    // When the set becomes empty, it gets recycled back to emptySetPool.\n    this.dirtyChildren = null;\n    this.dirty = true;\n    this.recomputing = false;\n    this.value = [];\n    this.deps = null;\n    ++Entry.count;\n  }\n  peek() {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  }\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  recompute(args) {\n    assert(!this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);\n  }\n  setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n  dispose() {\n    this.setDirty();\n    // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n    forgetChildren(this);\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n  forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n  dependOn(dep) {\n    dep.add(this);\n    if (!this.deps) {\n      this.deps = emptySetPool.pop() || new Set();\n    }\n    this.deps.add(dep);\n  }\n  forgetDeps() {\n    if (this.deps) {\n      arrayFromSet(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\nEntry.count = 0;\nfunction rememberParent(child) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n    if (!parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n    return parent;\n  }\n}\nfunction reallyRecompute(entry, args) {\n  forgetChildren(entry);\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n  return valueGet(entry.value);\n}\nfunction recomputeNewValue(entry, args) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\nfunction mightBeDirty(entry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\nfunction setClean(entry) {\n  entry.dirty = false;\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n  reportClean(entry);\n}\nfunction reportDirty(child) {\n  eachParent(child, reportDirtyChild);\n}\nfunction reportClean(child) {\n  eachParent(child, reportCleanChild);\n}\nfunction eachParent(child, callback) {\n  const parentCount = child.parents.size;\n  if (parentCount) {\n    const parents = arrayFromSet(child.parents);\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n}\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent, child) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n  if (!parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set();\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n  parent.dirtyChildren.add(child);\n  // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n}\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent, child) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(!mightBeDirty(child));\n  const childValue = parent.childValues.get(child);\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (!valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n  removeDirtyChild(parent, child);\n  if (mightBeDirty(parent)) {\n    return;\n  }\n  reportClean(parent);\n}\nfunction removeDirtyChild(parent, child) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\nfunction forgetChild(parent, child) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\nfunction maybeSubscribe(entry, args) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}","map":{"version":3,"names":["parentEntrySlot","maybeUnsubscribe","arrayFromSet","emptySetPool","POOL_TARGET_SIZE","assert","condition","optionalMessage","Error","valueIs","a","b","len","length","valueGet","value","valueCopy","slice","Entry","constructor","fn","parents","Set","childValues","Map","dirtyChildren","dirty","recomputing","deps","count","peek","mightBeDirty","rememberParent","recompute","args","reallyRecompute","setDirty","reportDirty","dispose","forgetChildren","eachParent","parent","child","forgetChild","forget","dependOn","dep","add","pop","forgetDeps","forEach","delete","clear","push","getValue","has","set","reportDirtyChild","reportCleanChild","entry","withValue","recomputeNewValue","maybeSubscribe","setClean","apply","e","size","reportClean","callback","parentCount","i","parentWasClean","childValue","get","removeDirtyChild","dc","_value","subscribe","unsubscribe"],"sources":["/Users/michaellin/side-projects/musicProject/my-app/client/node_modules/optimism/src/entry.ts"],"sourcesContent":["import { parentEntrySlot } from \"./context.js\";\nimport { OptimisticWrapOptions } from \"./index.js\";\nimport { Dep } from \"./dep.js\";\nimport { maybeUnsubscribe, arrayFromSet, Unsubscribable } from \"./helpers.js\";\n\nconst emptySetPool: Set<any>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe: Unsubscribable[\"unsubscribe\"];\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n  ) {\n    ++Entry.count;\n  }\n\n  public peek(): TValue | undefined {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(args: TArgs): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this)\n      ? reallyRecompute(this, args)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    this.setDirty();\n\n    // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n    forgetChildren(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  public forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n\n  private deps: Set<Dep<any>> | null = null;\n\n  public dependOn(dep: Dep<any>) {\n    dep.add(this);\n    if (! this.deps) {\n      this.deps = emptySetPool.pop() || new Set<Set<AnyEntry>>();\n    }\n    this.deps.add(dep);\n  }\n\n  public forgetDeps() {\n    if (this.deps) {\n      arrayFromSet(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry, args: any[]) {\n  forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry, args: any[]) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  eachParent(child, reportDirtyChild);\n}\n\nfunction reportClean(child: AnyEntry) {\n  eachParent(child, reportCleanChild);\n}\n\nfunction eachParent(\n  child: AnyEntry,\n  callback: (parent: AnyEntry, child: AnyEntry) => any,\n) {\n  const parentCount = child.parents.size;\n  if (parentCount) {\n    const parents = arrayFromSet(child.parents);\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n\n  // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry, args: any[]) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}