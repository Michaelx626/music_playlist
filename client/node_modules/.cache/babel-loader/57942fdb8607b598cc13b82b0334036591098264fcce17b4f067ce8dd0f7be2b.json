{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useSubscription(subscription, options) {\n  var hasIssuedDeprecationWarningRef = React.useRef(false);\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  var _a = React.useState({\n      loading: !(options === null || options === void 0 ? void 0 : options.skip),\n      error: void 0,\n      data: void 0,\n      variables: options === null || options === void 0 ? void 0 : options.variables\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onData ? 50 : 51);\n    }\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onComplete ? 52 : 53);\n    }\n  }\n  var _b = React.useState(function () {\n      if (options === null || options === void 0 ? void 0 : options.skip) {\n        return null;\n      }\n      return client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      });\n    }),\n    observable = _b[0],\n    setObservable = _b[1];\n  var canResetObservableRef = React.useRef(false);\n  React.useEffect(function () {\n    return function () {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n  var ref = React.useRef({\n    client: client,\n    subscription: subscription,\n    options: options\n  });\n  React.useEffect(function () {\n    var _a, _b, _c, _d;\n    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;\n    if (typeof shouldResubscribe === \"function\") {\n      shouldResubscribe = !!shouldResubscribe(options);\n    }\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip) || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables)) || canResetObservableRef.current) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options === null || options === void 0 ? void 0 : options.variables\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      }));\n      canResetObservableRef.current = false;\n    }\n    Object.assign(ref.current, {\n      client: client,\n      subscription: subscription,\n      options: options\n    });\n  }, [client, subscription, options, canResetObservableRef.current]);\n  React.useEffect(function () {\n    if (!observable) {\n      return;\n    }\n    var subscriptionStopped = false;\n    var subscription = observable.subscribe({\n      next: function (fetchResult) {\n        var _a, _b;\n        if (subscriptionStopped) {\n          return;\n        }\n        var result = {\n          loading: false,\n          data: fetchResult.data,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        };\n        setResult(result);\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onData) {\n          ref.current.options.onData({\n            client: client,\n            data: result\n          });\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function (error) {\n        var _a, _b;\n        if (!subscriptionStopped) {\n          setResult({\n            loading: false,\n            data: void 0,\n            error: error,\n            variables: options === null || options === void 0 ? void 0 : options.variables\n          });\n          (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n        }\n      },\n      complete: function () {\n        var _a, _b;\n        if (!subscriptionStopped) {\n          if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onComplete) {\n            ref.current.options.onComplete();\n          } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionComplete) {\n            ref.current.options.onSubscriptionComplete();\n          }\n        }\n      }\n    });\n    return function () {\n      subscriptionStopped = true;\n      setTimeout(function () {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]);\n  return result;\n}","map":{"version":3,"names":["invariant","React","equal","DocumentType","verifyDocumentType","useApolloClient","useSubscription","subscription","options","hasIssuedDeprecationWarningRef","useRef","client","Subscription","_a","useState","loading","skip","error","data","variables","result","setResult","current","onSubscriptionData","globalThis","__DEV__","warn","onData","onSubscriptionComplete","onComplete","subscribe","query","fetchPolicy","context","_b","setObservable","canResetObservableRef","ref","_c","_d","shouldResubscribe","observable","subscriptionStopped","next","fetchResult","subscriptionData","onError","call","complete","setTimeout","unsubscribe"],"sources":["/Users/michaellin/side-projects/musicProject/my-app/client/node_modules/@apollo/src/react/hooks/useSubscription.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"react\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport { equal } from \"@wry/equality\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport type {\n  NoInfer,\n  SubscriptionHookOptions,\n  SubscriptionResult,\n} from \"../types/types.js\";\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\nexport function useSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  const hasIssuedDeprecationWarningRef = React.useRef(false);\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = React.useState<\n    SubscriptionResult<TData, TVariables>\n  >({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options?.onSubscriptionData) {\n      invariant.warn(\n        options.onData\n          ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n          : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options?.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete\n          ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n          : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const [observable, setObservable] = React.useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const canResetObservableRef = React.useRef(false);\n  React.useEffect(() => {\n    return () => {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n\n  const ref = React.useRef({ client, subscription, options });\n  React.useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === \"function\") {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip) {\n      if (\n        !options?.skip !== !ref.current.options?.skip ||\n        canResetObservableRef.current\n      ) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options?.variables,\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (\n      (shouldResubscribe !== false &&\n        (client !== ref.current.client ||\n          subscription !== ref.current.subscription ||\n          options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n          !options?.skip !== !ref.current.options?.skip ||\n          !equal(options?.variables, ref.current.options?.variables))) ||\n      canResetObservableRef.current\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(\n        client.subscribe({\n          query: subscription,\n          variables: options?.variables,\n          fetchPolicy: options?.fetchPolicy,\n          context: options?.context,\n        })\n      );\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options, canResetObservableRef.current]);\n\n  React.useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    let subscriptionStopped = false;\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        if (subscriptionStopped) {\n          return;\n        }\n\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        if (ref.current.options?.onData) {\n          ref.current.options.onData({\n            client,\n            data: result,\n          });\n        } else if (ref.current.options?.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client,\n            subscriptionData: result,\n          });\n        }\n      },\n      error(error) {\n        if (!subscriptionStopped) {\n          setResult({\n            loading: false,\n            data: void 0,\n            error,\n            variables: options?.variables,\n          });\n          ref.current.options?.onError?.(error);\n        }\n      },\n      complete() {\n        if (!subscriptionStopped) {\n          if (ref.current.options?.onComplete) {\n            ref.current.options.onComplete();\n          } else if (ref.current.options?.onSubscriptionComplete) {\n            ref.current.options.onSubscriptionComplete();\n          }\n        }\n      },\n    });\n\n    return () => {\n      // immediately stop receiving subscription values, but do not unsubscribe\n      // until after a short delay in case another useSubscription hook is\n      // reusing the same underlying observable and is about to subscribe\n      subscriptionStopped = true;\n      setTimeout(() => {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]);\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}