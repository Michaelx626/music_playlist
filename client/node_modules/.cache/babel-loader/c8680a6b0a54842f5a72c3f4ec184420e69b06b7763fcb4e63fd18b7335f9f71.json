{"ast":null,"code":"var _jsxFileName = \"/Users/michaellin/side-projects/musicProject/my-app/client/src/store/appContext.js\";\nimport React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport getState from \"./flux.js\";\n\n// Don't change, here is where we initialize our context, by default it's just going to be null.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/React.createContext(null);\n\n// This function injects the global store to any view/component where you want to use it, we will inject the context to layout.js, you can see it here:\n// https://github.com/4GeeksAcademy/react-hello-webapp/blob/master/src/js/layout.js#L35\nconst injectContext = PassedComponent => {\n  var _s = $RefreshSig$();\n  const StoreWrapper = props => {\n    _s();\n    //this will be passed as the contenxt value\n    const [state, setState] = useState(getState({\n      getStore: () => state.store,\n      getActions: () => state.actions,\n      setStore: updatedStore => setState({\n        store: Object.assign(state.store, updatedStore),\n        actions: {\n          ...state.actions\n        }\n      })\n    }));\n    useLayoutEffect(() => {}, []);\n\n    // The initial value for the context is not null anymore, but the current state of this component,\n    // the context will now have a getStore, getActions and setStore functions available, because they were declared\n    // on the state of this component\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: state,\n      children: /*#__PURE__*/_jsxDEV(PassedComponent, {\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  };\n  _s(StoreWrapper, \"W943qizvYFtZkEL1vDXHF/+2CVk=\");\n  return StoreWrapper;\n};\nexport default injectContext;","map":{"version":3,"names":["React","useState","useEffect","useLayoutEffect","getState","jsxDEV","_jsxDEV","Context","createContext","injectContext","PassedComponent","_s","$RefreshSig$","StoreWrapper","props","state","setState","getStore","store","getActions","actions","setStore","updatedStore","Object","assign","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/michaellin/side-projects/musicProject/my-app/client/src/store/appContext.js"],"sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport getState from \"./flux.js\";\n\n// Don't change, here is where we initialize our context, by default it's just going to be null.\nexport const Context = React.createContext(null);\n\n// This function injects the global store to any view/component where you want to use it, we will inject the context to layout.js, you can see it here:\n// https://github.com/4GeeksAcademy/react-hello-webapp/blob/master/src/js/layout.js#L35\nconst injectContext = (PassedComponent) => {\n  const StoreWrapper = (props) => {\n    //this will be passed as the contenxt value\n    const [state, setState] = useState(\n      getState({\n        getStore: () => state.store,\n        getActions: () => state.actions,\n        setStore: (updatedStore) =>\n          setState({\n            store: Object.assign(state.store, updatedStore),\n            actions: { ...state.actions },\n          }),\n      })\n    );\n\n    useLayoutEffect(() => {\n\n    }, []);\n\n    // The initial value for the context is not null anymore, but the current state of this component,\n    // the context will now have a getStore, getActions and setStore functions available, because they were declared\n    // on the state of this component\n    return (\n      <Context.Provider value={state}>\n        <PassedComponent {...props} />\n      </Context.Provider>\n    );\n  };\n  return StoreWrapper;\n};\n\nexport default injectContext;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,eAAe,QAAQ,OAAO;AACnE,OAAOC,QAAQ,MAAM,WAAW;;AAEhC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,OAAO,gBAAGP,KAAK,CAACQ,aAAa,CAAC,IAAI,CAAC;;AAEhD;AACA;AACA,MAAMC,aAAa,GAAIC,eAAe,IAAK;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACzC,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAAAH,EAAA;IAC9B;IACA,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAChCG,QAAQ,CAAC;MACPa,QAAQ,EAAEA,CAAA,KAAMF,KAAK,CAACG,KAAK;MAC3BC,UAAU,EAAEA,CAAA,KAAMJ,KAAK,CAACK,OAAO;MAC/BC,QAAQ,EAAGC,YAAY,IACrBN,QAAQ,CAAC;QACPE,KAAK,EAAEK,MAAM,CAACC,MAAM,CAACT,KAAK,CAACG,KAAK,EAAEI,YAAY,CAAC;QAC/CF,OAAO,EAAE;UAAE,GAAGL,KAAK,CAACK;QAAQ;MAC9B,CAAC;IACL,CAAC,CACH,CAAC;IAEDjB,eAAe,CAAC,MAAM,CAEtB,CAAC,EAAE,EAAE,CAAC;;IAEN;IACA;IACA;IACA,oBACEG,OAAA,CAACC,OAAO,CAACkB,QAAQ;MAACC,KAAK,EAAEX,KAAM;MAAAY,QAAA,eAC7BrB,OAAA,CAACI,eAAe;QAAA,GAAKI;MAAK;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAEvB,CAAC;EAACpB,EAAA,CA1BIE,YAAY;EA2BlB,OAAOA,YAAY;AACrB,CAAC;AAED,eAAeJ,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}